~/Development/ISG_Labs/UT » npm test                                                                                                                                            andriifrankiv@MacBook-Pro

> ut@1.0.0 test /Users/andriifrankiv/Development/ISG_Labs/UT
> jest promises.spec.js

  console.log
    true

      at Object.<anonymous> (promises.js:23:9)

  console.log
    EX:1-3. No, you are not right!

      at promises.js:17:13

  console.log
    false

      at promises.js:34:13

(node:35703) UnhandledPromiseRejectionWarning: undefined
(node:35703) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 8)
(node:35703) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
 FAIL  ./promises.spec.js
  Promises
    Promises
      ✕ makePromiseResolveWith3 should create Promise with resolved 3  (1 ms)
      ✕ makePromiseRejectWithBoo should create Promise with rejected string "Boo"  (2 ms)
      ✕ makeDelayPromise should returns Promise resolved with a provided value after the provided delay (3010 ms)
      makePromiseWithConstructor should return a Promise
        ✕ should resolves if "itShouldResolve" is true
        ✕ should rejects if "itShouldResolve" is false  (1 ms)
      waitForPromise should call an action after the promise completion
        ✕ if promise resolves
        ✕ if promise rejects (1 ms)
      consumePromise should call a consumer with handled value after the promise completion
        ✕ resolved value should be handled by handler before passed to consumer (10 ms)
        ✕ rejected value should be handled by handler before passed to consumer

  ● Promises › Promises › makePromiseResolveWith3 should create Promise with resolved 3

    Failed: "EX:1-3. No, you are not right!"

      12 |     // const items = HW_Promises[student];
      13 |
    > 14 |     it('makePromiseResolveWith3 should create Promise with resolved 3 ', () => {
         |     ^
      15 |       return items['makePromiseResolveWith3']().then(result => {
      16 |         expect(result.toString()).toEqual('3');
      17 |       })

      at Env.it (node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:95:24)
      at Suite.<anonymous> (promises.spec.js:14:5)
      at Suite.<anonymous> (promises.spec.js:11:3)

  ● Promises › Promises › makePromiseRejectWithBoo should create Promise with rejected string "Boo"

    TypeError: items.makePromiseRejectWithBoo is not a function

      18 |     });
      19 |     it('makePromiseRejectWithBoo should create Promise with rejected string "Boo" ', () => {
    > 20 |       return items['makePromiseRejectWithBoo']().catch(result => {
         |              ^
      21 |         expect(result).toEqual('Boo!');
      22 |       })
      23 |     });

      at Object.<anonymous> (promises.spec.js:20:14)

  ● Promises › Promises › makePromiseWithConstructor should return a Promise  › should resolves if "itShouldResolve" is true

    TypeError: items.makePromiseWithConstructor is not a function

      27 |
      28 |       it('should resolves if "itShouldResolve" is true ', async () => {
    > 29 |         await items['makePromiseWithConstructor'](true)
         |               ^
      30 |         .then(mockResolve)
      31 |         .catch(mockReject);
      32 |

      at Object.<anonymous> (promises.spec.js:29:15)

  ● Promises › Promises › makePromiseWithConstructor should return a Promise  › should rejects if "itShouldResolve" is false

    TypeError: items.makePromiseWithConstructor is not a function

      34 |       });
      35 |       it('should rejects if "itShouldResolve" is false ', async () => {
    > 36 |         await items['makePromiseWithConstructor'](false)
         |               ^
      37 |         .then(mockResolve)
      38 |         .catch(mockReject);
      39 |

      at Object.<anonymous> (promises.spec.js:36:15)

  ● Promises › Promises › makeDelayPromise should returns Promise resolved with a provided value after the provided delay

    expect(received).toEqual(expected) // deep equality

    Expected: 3000
    Received: false

      47 |       await items['makeDelayPromise'](t, t).then(result => {
      48 |         const end = new Date();
    > 49 |         expect(result).toEqual(t);
         |                        ^
      50 |         expect((end - start) >= t).toBeTruthy();
      51 |       });
      52 |     });

      at promises.spec.js:49:24
      at Object.<anonymous> (promises.spec.js:47:7)

  ● Promises › Promises › waitForPromise should call an action after the promise completion › if promise resolves

    TypeError: items.makePromiseWithConstructor is not a function

      55 |       it('if promise resolves', async () => {
      56 |         const action = jest.fn();
    > 57 |         await items['waitForPromise'](items['makePromiseWithConstructor'](true), action);
         |                                       ^
      58 |         expect(action).toHaveBeenCalled();
      59 |       });
      60 |       it('if promise rejects', async () => {

      at Object.<anonymous> (promises.spec.js:57:39)

  ● Promises › Promises › waitForPromise should call an action after the promise completion › if promise rejects

    TypeError: items.makePromiseWithConstructor is not a function

      60 |       it('if promise rejects', async () => {
      61 |         const action = jest.fn();
    > 62 |         await items['waitForPromise'](items['makePromiseWithConstructor'](false), action);
         |                                       ^
      63 |         expect(action).toHaveBeenCalled();
      64 |       });
      65 |     });

      at Object.<anonymous> (promises.spec.js:62:39)

  ● Promises › Promises › consumePromise should call a consumer with handled value after the promise completion › resolved value should be handled by handler before passed to consumer

    ReferenceError: promice is not defined

      45 | // EXCERCISE 2 PART 2
      46 | function consumePromise(promise, consumer, handler){
    > 47 |     promice.then(response => {promice.handler(response)});
         |     ^
      48 | }
      49 |
      50 | module.exports = {

      at Object.consumePromise (promises.js:47:5)
      at Object.<anonymous> (promises.spec.js:73:15)

  ● Promises › Promises › consumePromise should call a consumer with handled value after the promise completion › rejected value should be handled by handler before passed to consumer

    ReferenceError: promice is not defined

      45 | // EXCERCISE 2 PART 2
      46 | function consumePromise(promise, consumer, handler){
    > 47 |     promice.then(response => {promice.handler(response)});
         |     ^
      48 | }
      49 |
      50 | module.exports = {

      at Object.consumePromise (promises.js:47:5)
      at Object.<anonymous> (promises.spec.js:83:15)

Test Suites: 1 failed, 1 total
Tests:       9 failed, 9 total
Snapshots:   0 total
Time:        5.004 s
Ran all test suites matching /promises.spec.js/i.
npm ERR! Test failed.  See above for more details.
-----------------------------------------------------------
